class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        def f1(i,prices,dp1,dp2):
            if dp1[i]==float('-inf'):
                if i==len(prices)-1:
                    dp1[i]=0
                else:
                    dp1[i]=max(f1(i+1,prices,dp1,dp2),f2(i+1,prices,dp1,dp2)-prices[i])
            return dp1[i]
        def f2(i,prices,dp1,dp2):
            if dp2[i]==float('-inf'): 
                if i==len(prices)-1:
                    dp2[i]=prices[-1]
                else:
                    dp2[i]=max(prices[i],f2(i+1,prices,dp1,dp2))
            return dp2[i]
        n=len(prices)
        dp1=[float('-inf')]*n
        dp2=[float('-inf')]*n
        return f1(0,prices,dp1,dp2)
       

        
    """ #ONCE ONE YOU CAN BUY ONE DAY AND FIND THE PROFIT 
       def f1(i,prices):
            if i==len(prices)-1:
                return 0
            else:
                return max(f1(i+1,prices),f2(i+1,prices)-prices[i])
        def f2(i,prices):
            if i==len(prices)-1:
                return prices[-1]
            else:
                return max(prices[i],f2(i+1,prices))
        return f1(0,prices)"""
        j=0
        max1=0
        for i in range (1,len(prices)):
            if(prices[i]-prices[j]>0 ):
                if(prices[i]-prices[j]>max1):
                    max1=prices[i]-prices[j]
            else:
                j=i
        return max1

        # 1 Brute Force
        # ans=float('-inf')
        # if len(prices)==1:
        #   return 0
        # for i in range (len(prices)):
        #     for j in range (i+1,len(prices)):
        #         ans=max(ans,prices[j]-prices[i])
        # if ans==-1:
        #   return 0
        # else:
        #   return ans
        
